# 分类模块规则

## 1. 模块概述
分类模块是博客系统的核心组件之一，用于组织和管理文章内容。该模块提供分类树、分类列表、分类详情及分类文章查询等功能，支持多级分类结构。

## 2. 数据结构

### 2.1 Category实体
```javascript
const CategoryEntity = {
  id: {
    type: 'integer',
    primary: true,
    generated: 'increment'
  },
  name: {
    type: 'string',
    length: 50,
    nullable: false
  },
  slug: {
    type: 'string',
    length: 50,
    nullable: false,
    unique: true
  },
  parent_id: {
    type: 'integer',
    nullable: true
  },
  post_count: {
    type: 'integer',
    default: 0
  },
  sort_order: {
    type: 'integer',
    default: 0
  },
  status: {
    type: 'integer',
    default: 1
  },
  created_at: {
    type: 'datetime',
    default: () => new Date()
  },
  updated_at: {
    type: 'datetime',
    default: () => new Date()
  }
};
```

## 3. API接口规范

### 3.1 获取分类树
- **URL**: `/api/frontend/categories/tree`
- **Method**: `GET`
- **Response**:
  ```json
  {
    "code": 200,
    "message": "获取分类树成功",
    "data": [
      {
        "id": 1,
        "name": "技术",
        "slug": "tech",
        "parent_id": null,
        "post_count": 10,
        "sort_order": 1,
        "children": [
          {
            "id": 2,
            "name": "前端开发",
            "slug": "frontend",
            "parent_id": 1,
            "post_count": 5,
            "sort_order": 1,
            "children": []
          }
        ]
      }
    ]
  }
  ```

### 3.2 获取分类列表
- **URL**: `/api/frontend/categories`
- **Method**: `GET`
- **Query Parameters**:
  - `parent_id`: 父分类ID（可选）
  - `page`: 页码，默认1
  - `pageSize`: 每页数量，默认20
- **Response**:
  ```json
  {
    "code": 200,
    "message": "获取分类列表成功",
    "data": {
      "list": [
        {
          "id": 1,
          "name": "技术",
          "slug": "tech",
          "parent_id": null,
          "post_count": 10,
          "sort_order": 1
        }
      ],
      "count": 1,
      "page": 1,
      "pageSize": 20,
      "totalPages": 1
    }
  }
  ```

### 3.3 获取分类详情
- **URL**: `/api/frontend/categories/{slug}`
- **Method**: `GET`
- **Path Parameters**:
  - `slug`: 分类别名
- **Response**:
  ```json
  {
    "code": 200,
    "message": "获取分类详情成功",
    "data": {
      "id": 1,
      "name": "技术",
      "slug": "tech",
      "parent_id": null,
      "post_count": 10,
      "sort_order": 1,
      "status": 1,
      "created_at": "2024-01-01T00:00:00Z",
      "updated_at": "2024-01-01T00:00:00Z"
    }
  }
  ```

### 3.4 获取分类下文章列表
- **URL**: `/api/frontend/categories/{slug}/posts`
- **Method**: `GET`
- **Path Parameters**:
  - `slug`: 分类别名
- **Query Parameters**:
  - `page`: 页码，默认1
  - `pageSize`: 每页数量，默认10
- **Response**:
  ```json
  {
    "code": 200,
    "message": "获取分类文章列表成功",
    "data": {
      "category": {
        "id": 1,
        "name": "技术",
        "slug": "tech"
      },
      "list": [
        {
          "id": 1,
          "title": "文章标题",
          "slug": "article-slug",
          "excerpt": "文章摘要",
          "cover": "https://example.com/cover.jpg",
          "view_count": 100,
          "like_count": 10,
          "user": {
            "id": 1,
            "name": "作者",
            "avatar": "https://example.com/avatar.jpg"
          },
          "created_at": "2024-01-01T00:00:00Z"
        }
      ],
      "count": 1,
      "page": 1,
      "pageSize": 10,
      "totalPages": 1
    }
  }
  ```

## 4. 缓存策略

### 4.1 缓存键命名规则
- 分类树：`category:tree`
- 分类详情：`category:slug:{slug}`
- 分类文章：`category:posts:{slug}:{page}:{pageSize}`

### 4.2 缓存过期时间
- 分类树：10分钟
- 分类详情：10分钟
- 分类文章：5分钟

### 4.3 缓存清理时机
- 分类创建、更新、删除时清理相关缓存
- 使用 `clearCache` 方法统一管理缓存清理

## 5. 服务层设计

### 5.1 CategoryService核心方法
- `getCategoryTree()`: 获取分类树
- `getCategories(params)`: 获取分类列表
- `getCategoryBySlug(slug)`: 通过slug获取分类详情
- `getPostsByCategory(slug, page, pageSize)`: 获取分类下文章列表
- `clearCache(type, key)`: 清理缓存

## 6. 错误处理

### 6.1 常见错误码
- 400: 请求参数错误
- 404: 分类不存在
- 500: 服务器内部错误

### 6.2 错误响应格式
```json
{
  "code": 404,
  "message": "分类不存在"
}
```

## 7. 性能优化

### 7.1 查询优化
- 使用索引加速slug查询
- 合理使用分页，避免一次性加载过多数据
- 按需加载关联数据

### 7.2 缓存优化
- 对频繁访问的数据使用Redis缓存
- 合理设置缓存过期时间
- 缓存预热机制（可选）

## 8. 安全考虑

### 8.1 输入验证
- 验证分页参数的有效性
- 验证slug格式的正确性
- 防止SQL注入

### 8.2 访问控制
- 仅返回状态为1的分类
- 防止敏感信息泄露
